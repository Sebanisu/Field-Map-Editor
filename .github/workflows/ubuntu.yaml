# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Field-Map-Editor-linux

run-name: 1.0.0.${{ github.run_number }}

on:
  workflow_dispatch:
  push:
    branches:
    - main
    tags:
    - "*"
  pull_request:
    branches:
    - main

env:
  _IS_BUILD_CANARY: false
  _IS_GITHUB_RELEASE: false
  _RELEASE_NAME: Field-Map-Editor
  _RELEASE_VERSION: v0
  _RELEASE_CONFIGURATION: Release
  _BUILD_BRANCH: "${{ github.ref }}"
  _CHANGELOG_VERSION: "0"
  # GIT: Fix reporting from stderr to stdout
  GIT_REDIRECT_STDERR: 2>&1

jobs:
  Field-Map-Editor:
    runs-on: ubuntu-latest
    timeout-minutes: 1440
    steps:
    - name: Check Ubuntu Version
      run: lsb_release -a    
    - name: Set Git Config
      run: |
        git config --global core.autocrlf false
        git config --global core.filemode false
        git config --global core.longpaths true
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo add-apt-repository universe -y
        sudo apt-get update
        sudo apt-get install -y ninja-build libxmu-dev libxi-dev libgl-dev libxrandr-dev libxinerama-dev libxcursor-dev gcc-14 g++-14
        # GCC 14
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
        # GCC 13
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 50
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 50
        g++ --version
        
    - name: Check Disk Space
      run: df -h
    - name: Bootstrap vcpkg
      run: ${{github.workspace}}/vcpkg/bootstrap-vcpkg.sh

    - name: Cache vcpkg binaries
      uses: actions/cache@v4
      with:
        path: ~/.cache/vcpkg/archives
        key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --parallel

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --output-on-failure

